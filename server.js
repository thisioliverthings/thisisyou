const TelegramBot = require('node-telegram-bot-api');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const https = require('https');

// ููุงุณ ููุชุนุงูู ูุน ุงูุฃุฎุทุงุก
class ErrorHandler {
    static handleError(bot, chatId, message) {
        console.error(message);
        bot.sendMessage(chatId, 'โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุทูุจู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.');
    }
}

// ููุงุณ ูุชุญููู ุงููุต ุฅูู PDF
class PDFConverter {
    static async textToPDF(text, outputFilePath) {
        return new Promise((resolve, reject) => {
            try {
                const doc = new PDFDocument();
                const writeStream = fs.createWriteStream(outputFilePath);

                doc.pipe(writeStream);
                doc.font('Times-Roman').fontSize(12).text(text, { align: 'left' });
                doc.end();

                writeStream.on('finish', resolve);
                writeStream.on('error', reject);
            } catch (err) {
                reject(err);
            }
        });
    }

    static downloadFile(fileUrl, outputPath) {
        return new Promise((resolve, reject) => {
            const file = fs.createWriteStream(outputPath);
            https.get(fileUrl, (response) => {
                response.pipe(file);
                file.on('finish', () => resolve(outputPath));
                file.on('error', (err) => {
                    fs.unlinkSync(outputPath); // ุญุฐู ุงูููู ูู ุญุงู ุงูุฎุทุฃ
                    reject(err);
                });
            }).on('error', (err) => {
                fs.unlinkSync(outputPath); // ุญุฐู ุงูููู ูู ุญุงู ุงูุฎุทุฃ
                reject(err);
            });
        });
    }
}

// ููุงุณ ูุชูุซูู ุจูุช ุชููุฌุฑุงู
class TelegramPDFBot {
    constructor(token) {
        this.bot = new TelegramBot(token, { polling: true });
        this.cache = new Map(); // ูุงุด ุงููููุงุช ุงููุคูุช
        this.init();
    }

    init() {
        this.bot.onText(/\/start/, (msg) => this.sendWelcomeMessage(msg.chat.id));
        this.bot.onText(/\/help/, (msg) => this.sendHelpMessage(msg.chat.id));
        this.bot.onText(/\/ุชุญููู/, (msg) => this.askForInput(msg.chat.id));
        this.bot.on('message', (msg) => this.handleUserInput(msg));
        this.bot.on('document', (msg) => this.handleDocumentMessage(msg));
    }

    sendWelcomeMessage(chatId) {
        const welcomeText = `
๐ <b>ูุฑุญุจูุง ุจู ูู ุจูุช ุชุญููู ุงููุตูุต ุฅูู PDF!</b> \n
ููููู ุงุณุชุฎุฏุงู ุงูุฃูุฑ <b>/ุชุญููู</b> ูุฅุฑุณุงู ูุต ุฃู ููู ูุณุฃููู ุจุชุญูููู ุฅูู ููู PDF ูู ุจุดูู ุชููุงุฆู. \n
ุฅุฐุง ููุช ุจุญุงุฌุฉ ูููุณุงุนุฏุฉุ ุงุณุชุฎุฏู ุงูุฃูุฑ <b>/help</b>.
`;
        this.bot.sendMessage(chatId, welcomeText, { parse_mode: 'HTML' });
    }

    sendHelpMessage(chatId) {
        const helpText = `
๐ <b>ุชุนูููุงุช ุงูุงุณุชุฎุฏุงู:</b> \n
1. ุงุณุชุฎุฏู ุงูุฃูุฑ <b>/ุชุญููู</b> ูุฅุฑุณุงู ูุตูุต ุฃู ูููุงุช ูุตูุฉ (ูุซู .txt ุฃู .docx). \n
2. ุณุฃููู ุจุชุญููููุง ุฅูู ููู PDF ุชููุงุฆููุง. \n
3. ุฅุฐุง ููุช ุจุญุงุฌุฉ ููุณุงุนุฏุฉ ุฅุถุงููุฉุ ููููู ุฏุงุฆููุง ุงุณุชุฎุฏุงู ุงูุฃูุฑ <b>/help</b>.
`;
        this.bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' });
    }

    askForInput(chatId) {
        const askText = '๐ ูู ูุถููุ ุฃุฑุณู ูู ุงููุต ุฃู ุงูููู ุงูุฐู ุชุฑุบุจ ูู ุชุญูููู ุฅูู PDF.';
        this.bot.sendMessage(chatId, askText);
    }

    handleUserInput(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;

        if (this.cache.has(chatId)) {
            this.convertTextToPDF(chatId, text);
        } else if (text) {
            this.cache.set(chatId, text);
            this.askForInput(chatId);
        }
    }

    async convertTextToPDF(chatId, text) {
        const outputPath = `output_${chatId}.pdf`;

        try {
            await PDFConverter.textToPDF(text, outputPath);
            await this.bot.sendDocument(chatId, outputPath);
            fs.unlinkSync(outputPath); // ุญุฐู ุงูููู ุจุนุฏ ุฅุฑุณุงูู
            this.cache.delete(chatId);
        } catch (err) {
            ErrorHandler.handleError(this.bot, chatId, err.message);
        }
    }

    handleDocumentMessage(msg) {
        const chatId = msg.chat.id;
        const fileId = msg.document.file_id;

        this.bot.getFile(fileId).then((file) => {
            const fileUrl = `https://api.telegram.org/file/bot${this.bot.token}/${file.file_path}`;
            const outputPath = `document_${chatId}.pdf`;

            PDFConverter.downloadFile(fileUrl, outputPath)
                .then(() => {
                    this.bot.sendMessage(chatId, 'โ ุชู ุชุญููู ุงูููู ุจูุฌุงุญ. ุณุฃููู ุจุชุญูููู ุฅูู PDF...');
                    this.convertFileToPDF(chatId, outputPath);
                })
                .catch((err) => ErrorHandler.handleError(this.bot, chatId, err.message));
        });
    }

    async convertFileToPDF(chatId, filePath) {
        const outputPath = `output_${chatId}.pdf`;
        try {
            const text = fs.readFileSync(filePath, 'utf-8');
            await PDFConverter.textToPDF(text, outputPath);
            await this.bot.sendDocument(chatId, outputPath);
            fs.unlinkSync(filePath); // ุญุฐู ุงูููู ุงูุฃุตูู
            fs.unlinkSync(outputPath); // ุญุฐู ุงูููู ุจุนุฏ ุฅุฑุณุงูู
        } catch (err) {
            ErrorHandler.handleError(this.bot, chatId, err.message);
        }
    }
}

// ุงุณุชุจุฏู 'YOUR_TELEGRAM_BOT_TOKEN' ุจุฑูุฒ ุงูุจูุช ุงูุฎุงุต ุจู
const token = '8062134382:AAGaHawjiD48hprrTw7egO2ehjPgkgNo_OY';
const pdfBot = new TelegramPDFBot(token);