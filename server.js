const TelegramBot = require('node-telegram-bot-api');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const https = require('https');

// ููุงุณ ููุชุนุงูู ูุน ุงูุฃุฎุทุงุก
class ErrorHandler {
    static handleError(bot, chatId, message) {
        console.error(message);
        bot.sendMessage(chatId, 'โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุทูุจู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.');
    }
}

// ููุงุณ ูุชุญููู ุงููุต ุฅูู PDF
class PDFConverter {
    static async textToPDF(text, outputFilePath) {
        return new Promise((resolve, reject) => {
            try {
                const doc = new PDFDocument();
                const writeStream = fs.createWriteStream(outputFilePath);

                doc.pipe(writeStream);
                doc.font('Times-Roman').fontSize(12).text(text, { align: 'left' });
                doc.end();

                writeStream.on('finish', resolve);
                writeStream.on('error', reject);
            } catch (err) {
                reject(err);
            }
        });
    }

    static downloadFile(fileUrl, outputPath) {
        return new Promise((resolve, reject) => {
            const file = fs.createWriteStream(outputPath);
            https.get(fileUrl, (response) => {
                response.pipe(file);
                file.on('finish', () => resolve(outputPath));
                file.on('error', (err) => {
                    fs.unlinkSync(outputPath); // ุญุฐู ุงูููู ูู ุญุงู ุงูุฎุทุฃ
                    reject(err);
                });
            }).on('error', (err) => {
                fs.unlinkSync(outputPath); // ุญุฐู ุงูููู ูู ุญุงู ุงูุฎุทุฃ
                reject(err);
            });
        });
    }
}

// ููุงุณ ูุชูุซูู ุจูุช ุชููุฌุฑุงู
class TelegramPDFBot {
    constructor(token) {
        this.bot = new TelegramBot(token, { polling: true });
        this.cache = new Map(); // ูุงุด ุงููููุงุช ุงููุคูุช
        this.init();
    }

    init() {
        this.bot.onText(/\/start/, (msg) => this.sendWelcomeMessage(msg.chat.id));
        this.bot.onText(/\/help/, (msg) => this.sendHelpMessage(msg.chat.id));
        this.bot.onText(/\/ุชุญููู/, (msg) => this.askForInput(msg.chat.id));
        this.bot.on('message', (msg) => this.handleUserInput(msg));
        this.bot.on('document', (msg) => this.handleDocumentMessage(msg));
    }

    sendWelcomeMessage(chatId) {
        const welcomeText = `
๐ ูุฑุญุจูุง ุจู ูู ุจูุช ุชุญููู ุงููุตูุต ุฅูู PDF!<n>
ููููู ุงุณุชุฎุฏุงู ุงูุฃูุฑ <b>/ุชุญููู</b> ูุฅุฑุณุงู ูุต ุฃู ููู ูุณุฃููู ุจุชุญูููู ุฅูู ููู PDF ูู ุจุดูู ุชููุงุฆู.<n>
ุฅุฐุง ููุช ุจุญุงุฌุฉ ูููุณุงุนุฏุฉุ ุงุณุชุฎุฏู ุงูุฃูุฑ <b>/help</b>.
`;
        this.bot.sendMessage(chatId, welcomeText, { parse_mode: 'HTML' });
    }

    sendHelpMessage(chatId) {
        const helpText = `
๐ <b>ุชุนูููุงุช ุงูุงุณุชุฎุฏุงู:</b><n>
1. ุงุณุชุฎุฏู ุงูุฃูุฑ <b>/ุชุญููู</b> ูุฅุฑุณุงู ูุตูุต ุฃู ูููุงุช ูุตูุฉ (ูุซู .txt ุฃู .docx).<n>
2. ุณุฃููู ุจุชุญููููุง ุฅูู ููู PDF ุชููุงุฆููุง.<n>
3. ุฅุฐุง ููุช ุจุญุงุฌุฉ ููุณุงุนุฏุฉ ุฅุถุงููุฉุ ููููู ุฏุงุฆููุง ุงุณุชุฎุฏุงู ุงูุฃูุฑ <b>/help</b>.
`;
        this.bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' });
    }

    askForInput(chatId) {
        const askText = '๐ ูู ูุถููุ ุฃุฑุณู ูู ุงููุต ุฃู ุงูููู ุงูุฐู ุชุฑุบุจ ูู ุชุญูููู ุฅูู PDF.';
        this.bot.sendMessage(chatId, askText);
    }

    async handleUserInput(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;

        // ุชุญูู ูู ุฃู ุงูุฑุณุงูุฉ ููุณุช ุฃูุฑูุง
        if (!msg.document && !text.startsWith('/')) {
            const pdfFilename = `output_${chatId}.pdf`;

            // ุฅุถุงูุฉ ุฐูุงุก ุงุตุทูุงุนู ุจุณูุท ูุชูุฏูู ุฑุฏูุฏ ุฐููุฉ
            const responseText = this.getAIResponse(text);

            try {
                // ุชุญููู ุงููุต ุฅูู PDF
                await PDFConverter.textToPDF(responseText, pdfFilename);
                this.cache.set(responseText, pdfFilename); // ุฅุถุงูุฉ ุงูููู ุฅูู ุงููุงุด

                // ุฅุฑุณุงู ููู PDF
                await this.bot.sendDocument(chatId, pdfFilename, {}, {
                    caption: '๐ ุฅููู ููู PDF ุงูุฎุงุต ุจู!'
                });

                // ุญุฐู ุงูููู ุจุนุฏ 5 ุฏูุงุฆู
                setTimeout(() => {
                    fs.unlinkSync(pdfFilename);
                    this.cache.delete(responseText);
                }, 300000);
            } catch (err) {
                ErrorHandler.handleError(this.bot, chatId, err);
            }
        }
    }

    getAIResponse(inputText) {
        // ููุง ููููู ุงุณุชุฎุฏุงู ูููุฐุฌ ุฐูุงุก ุงุตุทูุงุนู ูุชุญููู ุงููุต ูุชูุฏูู ุฑุฏูุฏ ุฐููุฉ.
        // ุณูููู ุจุฅูุดุงุก ุฑุฏูุฏ ุจุณูุทุฉ ุจูุงุกู ุนูู ูุฏุฎูุงุช ุงููุณุชุฎุฏู.

        if (inputText.toLowerCase().includes('ูุฑุญุจุง')) {
            return 'ุฃููุงู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ';
        } else if (inputText.toLowerCase().includes('ููู ุญุงูู')) {
            return 'ุฃูุง ุจุฎูุฑุ ุดูุฑูุง! ูุงุฐุง ุนููุ';
        } else {
            return inputText; // ุฅุฐุง ูู ููู ููุงู ุงุณุชุฌุงุจุฉ ุฎุงุตุฉุ ูุนูุฏ ุงููุต ููุง ูู
        }
    }

    async handleDocumentMessage(msg) {
        const chatId = msg.chat.id;
        const fileId = msg.document.file_id;
        const fileType = msg.document.mime_type;
        const allowedFileTypes = [
            'text/plain',
            'application/msword',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        ];

        // ุงูุชุฃูุฏ ูู ููุน ุงูููู
        if (!allowedFileTypes.includes(fileType)) {
            return this.bot.sendMessage(chatId, '๐ซ ูุฑุฌู ุฅุฑุณุงู ููู ูุตู ุฃู .docx ููุท.');
        }

        try {
            const fileUrl = await this.bot.getFileLink(fileId);
            const txtFilename = `input_${chatId}.txt`;

            // ุชุญููู ุงูููู
            const downloadedFile = await PDFConverter.downloadFile(fileUrl, txtFilename);
            const text = fs.readFileSync(downloadedFile, 'utf8');
            const pdfFilename = `output_${chatId}.pdf`;

            // ุชุญููู ุงููุต ูู ุงูููู ุฅูู PDF
            await PDFConverter.textToPDF(text, pdfFilename);

            // ุฅุฑุณุงู ููู PDF
            await this.bot.sendDocument(chatId, pdfFilename, {}, {
                caption: '๐ ุฅููู ููู PDF ุงูุฎุงุต ุจู!'
            });

            // ุญุฐู ุงููููุงุช ุจุนุฏ ุงูุฅุฑุณุงู
            fs.unlinkSync(pdfFilename);
            fs.unlinkSync(txtFilename);
        } catch (err) {
            ErrorHandler.handleError(this.bot, chatId, err);
        }
    }
}

// ุงุณุชุจุฏู ุงูุชููู ุจุงูุชููู ุงูุฎุงุต ุจู
const token = '8062134382:AAGaHawjiD48hprrTw7egO2ehjPgkgNo_OY';
const pdfBot = new TelegramPDFBot(token);